(Individual) Group member evaluations

Part I – Project Information

(2%) Introduction - Describe the world you are trying to model. Include everything that you feel is relevant. [1/2-1 pages] 
- Our project will be an online site to review and provide feedback on the various TAs in courses across UVA grounds. Currently there are many sites that students can look at to find feedback on professors, but none are available for teaching assistants. Many classes, especially in the College of Arts & Sciences have discussions and labs where the student has to choose a TA to be their assistant. This site would provide valuable information for the students, as well as the TAs as they will be able to review feedback on areas that they are doing well in or could improve on.

(3%) Requirements Document - List of functions, requirements, user stories, use cases, etc. that your application must fulfill. This must be at least 1 page (otherwise you have a really small app and that's not good), but doesn't have to be terribly much longer. Make sure to talk about your security measures, special functionality, and how you export data! [1+ pages]
- Authentication will be through Google. Blocking on only letting ‘.virginia.edu’ accounts through
- Users can leave reviews on TAs for specific classes
- Users can edit their reviews. Their authenticated token must match the associated stored token of the review they are trying to edit
- Users can leave feedback for how the site can be improved
- Browse through the various courses. For any given course, a list of sections will be displayed
- Search functionality to search on TA’s name/account or a course/section ID
- Export a file of all reviews for a given course (similar to Lou’s List export functionality)



Part II - The Design Process

(2%) Explanation of design decisions that you made in creating your application (i.e. why you choose the type of app you did, why that language, if your database should be secure, did you secure it and how, anything interesting or relevant, etc.) [1/2 page]
- Complex SQL Commands: Primary/Foreign Keys, NOT NULL, UNIQUE, Default Values
- We chose to create the TA Forum as it would provide functionality that would be helpful to UVA students that they don't currently have access to. This type of application falls under a good type of project that we want to be building for the CS4750 final project. Additionally, we can model some ideas off of Lou's List and the Course Forum when it comes to complex, UVA specific design problems (particularly in regards to course structure)
- We are using PHP and HTML because that seems to be the main language that the course CS4750 is focusing on. This provides us with good reference materials from Collab.
- To secure our database, we were initially thinking of using Google's email/user API, as we believed that to be particularly secure. This proved to have some difficulties so we defaulted back to storing all of the user information ourselves. We are storing a user's email, name, and password hash. This allows us to let users login using a constrained password (8+ characters, capital and lower case letters, special characters) that is then hashed to be checked. We are doing any and all database related user work using a specific account (***REMOVED***) that is separate from all of our other database tables. This will prevent any other types of database queries from even possibly affecting our users. This will help to prevent our site from being insecurely accessed by unintended users.

(5%) An E-R diagram
- Jessica is doing this

(2%) Database schema including integrity constraints
Note:
- "*field_name*" means that "field_name" is a primary key
Tables:
- dept(*course_dept*, school)
- user(*email*, name, password_hash)
- course(*course_id*, course_mnemonic_number, title, course_dept)
- section(section_number, *section_id*, semester, year)
- ta(*ta_id*, ta_name, graduation_year)
- review(*review_id*, description, timestamp, email)
- feedback(*feedback_id*, description, timestamp)

Relationships:
- review_about(*review_id*, ta_id, section_id)
  - [review|ta|section] many-to-one-to-one
- teaches(*ta_id*, *section_id*)
  - [ta|section] many-to-many
- section_of(course_id, *section_id*)
  - [course|section] one-to-many



(5%) BCNF, 3NF, or other normal form proof
- See picture of proof (or possibly a nicely formatted version)


Part III - Evaluation of Product

(2%) A description of the testing procedures for the database and the application. If you didn't test, you didn't do good design. You don't have to go into unit tests, etc., but just give a general idea of what you did to make sure that everything works. [? pages]
- Run through all processes starting from a fresh slate (non registered user)
- Run through all processes as a returning user
- Try the general bad cases (blank input, malformed input)
- Attempt various security attacks (SQL injection)

(2%) Sample Data & Sample Queries. Give an idea of what your database does without having to load it.
- Add all the classes
- Have a small handful of reviews
- During demo, can add more reviews as we go

(2%) Grammar + Spelling
- zzz